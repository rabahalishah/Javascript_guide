---------------Default Parameters
These default parameters are the values which are passed to the function in case we donot provide them.
for example:

const shopping = function(fruitName,  size='standard', fruitPrice = 85){
    
	console.log(`The price of ${size} size ${fruitName} is $${fruitPrice}`);
};


shopping('Apple' , undefined , 99); //The price of standard size Apple is $99
// this is how you skip the in between argument as default.

Here we didnt provide any 2nd argument and the function took the default value of size that is 'standard'

-------------Passing by values or Passing by function

Javascript always pass by value although it seems like it pass by reference but actually thats not the case cause that ref is ultimately an address of the value stored in HEAP (memory).
So actually we pass reference to function not pass BY reference.

--------------Frist class functions and Higher order functions.

Functions are another objects and values on which we can call methods
functions are simply values which a getting return on some action.
Storing function in a variable, passing function as an argument to the other functions, return functions from functions, calling methods on functions
all are examples of first class function (Simply a function)

Higher order function:
Function that receive another function or return a new function (call-back function) are called higher order function

-----------JavaScript Abstraction
An abstraction is a way of hiding the implementation details and showing only the functionality to the users. In other words, it ignores the irrelevant details and shows only the required one.

element.addEventListener('click', clickHandler());
// We just passed function as a value instead of writing the whole functionality here this kind of hidding techniques are called JS Abstractions.

---------------Function returning a function

const greet = function(greeting) {
	return function(name) {
		console.log(`${greeting} ${name}`)
}
};

OR // writing arrow function of above

const greetArrow => greeting => name => console.log(`${greeting} ${name}`)

const greetHello = greet('hello');
greetHey('Waaqqah')

// hello waaqqah

OR

greeting('hello')('Waaqqah');  //hello Waaqqah

---------Call and apply method

as we know that this keyword depends on how a function is called.
as we know in regular calling function the this keyword is undefined (when strict mode is ON).
So if there is a funciton is in an object and that function contains this key word then it would be find if we call that function on an object. But this wont be work if we call that function
as regular function the reason on calling regular function the function dont know what this keyword is. 

So this problem can be solve if we tell the function what this keyword is. So we can do that by using call
// Syntax:
anyfunction.call(object_where_we_are_point_our_this_keyword, other aurguments which function receive)

const menu = {
lulu : 'candy',
dish: 'fish',
book(fruit, price){
	console.log(`${this.lulu}, ${this.dish} ${fruit} ${price} `);
}
}
const book = menu.book;
book('Apple' , 87) // here we are calling book as regular function this will give use an error


**Correct WAY
book.call(menu, 'Apple' , 87); // Here menu is an object and apple and 87 are arguments

------------Apply method
exactly same as call but the difference is that it takes an array of arguments instead of separate arguments


myList = ['Apple' , 87]
const book = menu.book;
book.call(menu, myList); // Here menu is an object and myList is an array and passing as an argument.



-----------Bind function
this function also have the same purpose to solve the this keyword problem.
the difference is that this bind function returns a new function (that new function is already integrated with this keyword) on which we can pass our arguments

const book = menu.book;
const newFunc = book.bind(menu); // here menu is an object 
newFunc('Apple' , 87);

--------------Immediately invoked function Expressions (IIFE)
These are the function expresion which are executed once will never be executed again. They will immediately disappear after their execution.
An IIFE (Immediately Invoked Function Expression) is a function that runs the moment it is invoked or called in the JavaScript event loop. Having a function that behaves that way can be useful in certain situations. IIFEs prevent pollution of the global JS scope.

(() => console.log('I am IIFE'))();









	