In actual we do not write a whole script and send to browser for the production. Instead we use modules our own custom build modules or 3rd party modules which we download with the help of Node package manager. Once our project is ready we make bundle of our code. Which is also done by some 3rd part open source frame works or libraries such as parcel. Parcel is JS bundler which bundle our code and also with the help of babel we convert it back to ES5 for all browser compatiblity. The whole process is called build process in which we make package.json file which keep record of all the modules used in our project. 



----------Module
its a reusable piece of code. It basically a stand alone file. Its not always the same case. 
Whatever we export from the module is called public API. Whatever we import in the module is called dependencies without which our code is dead. One can work on a single component/module of a project without knowing that how the whole app work. This help teams to work in easy way


---------Difference between ES6 module and Script

There is a lot of difference between them:
1. In Modules top level variables are Scoped to modules whereas in script these variables are global.
2. ES6 module defualt mode is strict whereas in script the default mode is sloppy mode.
3. This keyword is undefined in ES6 module, whereas this keyword is window object in script
4. Imports exports are allowed in ES6 in script NO.
5. HTML link the type is module. For script HTML are simple linked.
6. Files are downloaded asynchronously in ES6 whereas in script it down.

-----------BTS Import export

Modules are imported sychronously. First all the imports are known before the execution of code. This makes bundling and dead code elimination easier. The downloading of the module happen asynchronously afer downloading the import is connected with export. 

You cannot access the variable of any other module into your module until you export them from the export module and import them from in the import module.

-------------Module pattern

In this pattern you simply return the variables defined within the scope of the function to the Immediately invode function so that these variables can also be accessed outside the function.
for example:


const ShoppingCart = function(){
const cart = 20;
const shippingCost =50;
console.log("I am a function");
return {
	cart,
	shippingCost
}
}


console.log(ShoppingCart().cart);

Here you can see the cart object is out of scope but still we have accessed it by the help of module pattern. Actually we have returned it in the function

---------CommonJS is simply a standard to have common pattern in all JS around the world
like importing variales using require this will only work with node.
This wont work in browsers

const {addToCart} = require("./shoppinCart.js");


--------------NPM

to manage our dependencies in a good way we can use NPM 


--------------Imperative VS Declarative Code Paradigms----
In Imperative we explain computer "how to do" things. We explain computer every single step it has to follow to achieve a result.

In declarative: We tell "what to do"

Functional programming is also declarative and modern way in which we write the program by using many pure functions, avoiding side effects and mutating data.
Pure function is a function which have no side effects and its not depened on any other variable and always return the same value on same input. A side effect is when a function relies on, or modifies, something outside its parameters to do something.


-----------------Parcel Bundling and deployment in JS
NOTE: also remove the type="module" from the script tag in index.html file

npm install parcel --save-dev
or 
sudo npm install parcel
npx parcel index.html (this will make the bundle behind the scene and this also work as live-server)

now go to package.json and write in start: "parcel index.html"
build: "parcel build index.html --dist-dir ./dist"


and set main to default as below:

"default" : "index.html"

now run the below:
npm run build

then push it to gitHub

parcel automatically use babel so we dont have to need worry about polyfil and transpile. But recently babel has strated recommending another library for polyfilling that is cors-js which make sure that the specific code is supported by the browser or not.



