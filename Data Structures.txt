Destructuring: Its simply unpacking or dividing a data structure into smaller data structure like variables.
We can switch variables easily.
We can get more than one value return from the function
For Arrays:
const [x,y,z] = [2,3,4] // 2 3 4
We can easily switch variables

[z,y,x] = [x,y,z] // 4 3 2


--------Nested array
const nested = [2, 4,[5, 6]]

let [i, ,[j , k]] = [2, 4,[5, 6]]
console.log(i , j , k)  // 2 5 6 

------

[p, q, r] = [1,2]
console.log( p,q,r) // 1, 2, undefined


------------Objects destructuring

syntax: 
({original name: alias} = object);
dont forget these round brackets

const {name: restaurantName,
	openingHours: hours,
	categories: tag } = restaurant; // where restaurant is an object containing info about restaurant
console.log(restaurantName, hours, tag)


-----------------For parameters which are not in your object but you want to give them a default value you can do below:
const {menu = [], name: restaurantName, openingHours: hours, categories: tag } = restaurant; // here menu is added



---------Spread operator (...)
This operator is used to spread the arrays or merge one array into another
const arr= [1,2,4]
const arr2 = [5,6]
arr12 = [5,6,...arr]

values separated by comma are only acceptable when passing arguments to the function or making a new array
console.log(`${...arr}) this is not acceptable 

-----------REST operator opposite to spread operator

const [a,b,...other] = [1,2,3,5,6,8,9]

const add =  function(...num){
let sum=0;
for(i=0; i<num.length; i++){
 sum+=num[i]
console.log(sum) }
}


add(2,3,4)
add(10,12,13,15,1,1,1,1,1,9) // as many arguments you want

x= [12,54,68,9,8,74,4]

add(...x);

-----------------SHORT circuiting
The result of OR and AND operator is not always a boolean value.
Properties of Boolean operators:
1. They can use any DATA TYPE.
2. They can return any DATA TYPE.
3. They can do short circuiting. (In case of OR operator if the first value is a truthy value it will return that value JS will not even look at the second value. There can be
   multiple values for OR opertar it will see one by one from left to right as the truthy value is found it will return that and will ignore the rest of the variables. In case of all falsy it will return the last one)

In case of AND operator it is exactly opposite of the OR operator it will return falsy value and will ignore the rest values. In case of all truthy it will return the last one

---------------Nullish Operator

it works on the prinicple of nullish values instead of falsy values. Nullish values are null and undefined.

it returns non- nullish values.
console.log(0 ?? null) // 0 as zero is non-nullish value

----------For of loop:
this loop is more like pythons for loop
const menu = ['applie', 'protein', 1,2,3,4,5,6,7,8,9,10]

for (items of menu) {
	console.log(items);
}

--------------
ES6 obj literals
1. if you have key and values both have same values you can go with one name for exp:
{hour: hour} instead you can do thi {hour} both are exactly same.

2. If there is a function expression in an object you can also use new easy syntax that is:
const obj = {
order: function (){
consolse.lolg('Your order has placed');
}
};

instead you can do this
const obj = {
order(){
consolse.lolg('Your order has placed');
}
};

-------Optional Chaining-----
syntax: property.? 

this is useful when we dont know whether the property in a object currently exist or not or whether in the future there will be that property or not.
so for example
console.(restaurant.openHours.monday?.open);

here we are not sure about the monday that our restaurant is open on monday or not? if it is true then it will proceed otherwise it will return undefined instead of giving us an error.

-------------LOOP on Objects (which are not iterable)
const entries = Object.entries(openingHours) 
for ( [day , {open , close} ] of entries) {
	console.log(`Our shop is get open on ${day}` from ${open} to ${close}`)
}


here first we extrated array from Objects and then we applied loop on it.

-------------------Sets
const arr = [1,2,2,3]
const mySet = new set(arr)
We can convert an array into set using set() method
Sets are also iterable (means we can apply loop on them) but they do not repeat any content.
We cannot use index on sets.
set uses .size() method instead of .length() (it do not count repeated objects)
set uses .has() method instead of include() method
set uses .add() method instead of push() method
set uses .delete() method instead of push() method
.clear() method is used to delete all the objects
arrays use .length() method
spread operator work same for sets

---------------Map
Map objects are collections of key-value pairs. A key in the Map may only occur once; it is unique in the Map 's collection. A Map object is iterated by key-value pairs â€” a for...of loop returns a 2-member array of [key, value] for each iteration.
// Creating Map object Method 1
const myMap = new Map();
myMap.set(key,value)  //here set keyword actually modify the myMap or on which it is applying

// Creating Map object Method 1
const myMap = new Map([key1, value1], [key2, value2]);

.get() method is use dto retrieve the value


----------------Data structure
4 Basic Built-In
1. Arrays
2. Objects
3. Set
4. Map

Non-BUiltIN
Stacks
Queues
Linked lists
Trees
Hash Tables


-----When to use which
1. Arrays (When you need an ordered list may contain duplicates and when you need to manipulate data) 
2. Set (When you need an order UNIQUE list, high performance as searching elements in sets are 10x faster than arrays, removes duplicate from arrays
3. Objects (More traditional, easy to write and access data value with . and [], when you used funcitons as values, when working with JSON (can convert to Map))
4. Map (Better perfromance, can have any data type, Easy to iterate, Easy to compute size)  

--------------Strings
We can get any Alphabet by simply using index on strings
Strings are immutable.

Slice method is used to extract specific portion from an existing string. It returns that extracted value not modify the string as we know strings are immutable.
Behind the scenes JS convert string into an object thats why we are able to apply methods on them.
Slice(start, end) method take two arguments starting and ending index. if you wont give the ending index and only give the starting index it will start and go each by each to the ending 
index like loop.

console.log('apple'.toUppercase.slice(1))  //aPPLE
----------------------------

anySentence.replace(string to be replaced, new string)

this will only replace the first occurance of that word in the sentence. In order to change all the occurance one must have to you a special syntax as given below:
for exp we want to replace all door words in the sentence with gate so do as below:

anySentence.replace(/door/g, gate)  // here g stands for global
-----------------
The split() method is used to split the given string by provided symbol and it returns an array.
console.log('An+Apple'.split('+')); // ["An", "Apple"]


console.log(['MR.', 'Mukhesh'.toUpperCase, 'Gahlot'].join('---')); //Mr.---MUKHESH---Gahlot







