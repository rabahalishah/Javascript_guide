***********Function
A variable can store single line of code wherease a function can store a stack of code.

// The below is called constructor function
function Person(firstName, lastName) {
  this.firstName = firstName;
  this.lastName = lastName;
}
we cannot call constructor fucntion as regular function. otherwise we will get undefined

*********Function Declaration and function expression
if you simply defines a function then this will be a function on the other hand if you define a function and you assign it to a variable then this will called as function expression.

// This is called function declaration
function ageCalc(birthYear) {
return 2037- birthYear;
}
// The difference is that in function declaration we can call function even before its declaration. But in case of function expressions you cannot call the function before its declaration.
you first have to declare that function and then after that you can call it.

// This will called function expression
const calcAge2 = function (birthYear) {
return 2037- birthYear;
}

In arrow functions you dont event write return statement explicitly only when the function is one liner
In case of multiple lines you have to write return.
Arrow functions donot take "this" keyword.


**********************Arrays (data structures)

alternative way of defining array

const myArray = new Array(1991,1992,1993)
console.log(myArray)

we can mutate the array even they are declared with const. But we cannot replace the whole array declared with const.
like we cant do this:
const myArray =[1,2,3]
const myArray = [4,5,6]
// ERROR

Arrays can hold different data types all at the same time.
Arrays can also hold other arrays.
We cannot do number minus Array

************Arrays basic Operations
.push(anyValue) method returns the length of array. This methods add elements at the end of array.
.unshift(anyValue) method it add the element at the start of array
.pop() method removes the last element and it returns the removed element
.shift() method removes the first element of array and returns that removed element.
.indexOf(anyValue) this method returns the index of the passed element as an argument	
.includes() this element returns boolean value.	(it compares the value using strict operator i.e ===)


***********Objects
In arrays we cannot give names to the values. we can only access them by their index number. In order to solve this problem we use objects. it includes key value pair. Each key will called as property.
arrays used for more strcutured data whereas objects used for unstructured data.
we can access data in obj by dot or [] notation

myObj = {
name: rabah,
agr: 20}

conosle.log(myObj.name);
console.log(myObj['name']; // in bracket notation we can also write some expression (an opertation which returns some value).

both will return rabah

************Obj method
obj can also hold function. And any function attached to the obj is called method. we cannot declare function in an obj but we can write function as an expression in the obj.
myObj = {
calcAge: function (birthYear) {
return 2037-birthyear}}
// calling it

console.log(myObj.calcAge(1995));
console.log(myObj.['calcAge'](1995));

this keyword in obj is equivalent to object itself. This means we can access any property and method in an object by this keyword e.g this.birthYear;

*************Continue and break in loops
continue keyword will let the loop to complete its iterations even when the condition is met.
whereas the break keyword will exit the loop immediately once the condition is met.

**********While loop
while loop is not dependent on counter.
Use while loop when you are not sure about the number of iterations

let rep = 1
while (rep<11){
consolse.log(`I have done ${rep} reps`)
rep++};




